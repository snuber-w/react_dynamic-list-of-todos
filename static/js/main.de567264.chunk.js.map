{"version":3,"sources":["types/TodoStatus.ts","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","components/helpers.ts","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoStatus","TodoInfo","todo","selectedTodo","onSelect","id","title","completed","isTodoSelected","className","cn","type","onClick","TodoList","React","memo","todos","map","normalize","str","replace","toLowerCase","TodoFilter","query","status","onFilter","onSelectStatus","onSubmit","event","preventDefault","value","onChange","target","Object","values","todoStatus","word","charAt","toUpperCase","slice","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","onClose","userId","useState","user","setUser","useEffect","getUser","userFromServer","href","email","name","App","setTodos","setSelectedTodo","setQuery","All","setStatus","isLoaded","setIsLoaded","todosFromServer","visibleTodos","filter","isStatusMatch","normalizedQuery","isTodoIncluded","includes","Active","Completed","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.de567264.chunk.js","sourcesContent":["export enum TodoStatus {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo;\n  selectedTodo: Todo | null;\n  onSelect: (todo: Todo) => void;\n}\n\nexport const TodoInfo: React.FC<Props> = ({\n  todo,\n  selectedTodo,\n  onSelect,\n}) => {\n  const { id, title, completed } = todo;\n\n  const isTodoSelected = id === selectedTodo?.id;\n\n  return (\n    <tr\n      key={id}\n      data-cy=\"todo\"\n      className={cn({\n        'has-background-info-light': isTodoSelected,\n      })}\n    >\n      <td className=\"is-vcentered\">\n        {id}\n      </td>\n\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={cn({\n            'has-text-success': completed,\n            'has-text-danger': !completed,\n          })}\n        >\n          {title}\n        </p>\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => onSelect(todo)}\n        >\n          <span className=\"icon\">\n            <i className={cn('far', {\n              'fa-eye': !isTodoSelected,\n              'fa-eye-slash': isTodoSelected,\n            })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[];\n  selectedTodo: Todo | null;\n  onSelect: (todo: Todo) => void;\n}\n\nexport const TodoList: React.FC<Props> = React.memo(({\n  todos,\n  selectedTodo,\n  onSelect,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <TodoInfo\n          key={todo.id}\n          todo={todo}\n          selectedTodo={selectedTodo}\n          onSelect={onSelect}\n        />\n      ))}\n    </tbody>\n  </table>\n));\n","export function capitalize(word: string) {\n  return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n}\n\nexport function normalize(str: string) {\n  return str.replace(/\\s/g, '').toLowerCase();\n}\n","import React from 'react';\nimport { TodoStatus } from '../../types/TodoStatus';\nimport { capitalize } from '../helpers';\n\ninterface Props {\n  query: string;\n  status: string;\n  onFilter: (value: string) => void;\n  onSelectStatus: (todoStatus: TodoStatus) => void;\n}\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  status,\n  onFilter,\n  onSelectStatus,\n}) => {\n  const handleFormOnSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n  };\n\n  const handleQueryOnChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    onFilter(event.target.value);\n  };\n\n  const handleStatusSelectOnChange = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    onSelectStatus(event.target.value as TodoStatus);\n  };\n\n  const handleClearButtonOnClick = () => onFilter('');\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={handleFormOnSubmit}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleStatusSelectOnChange}\n          >\n            {Object.values(TodoStatus).map((todoStatus) => (\n              <option key={todoStatus} value={todoStatus}>\n                {capitalize(todoStatus)}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQueryOnChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"clear\"\n              onClick={handleClearButtonOnClick}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ninterface Props {\n  todo: Todo;\n  onClose: () => void;\n}\n\nexport const TodoModal: React.FC<Props> = React.memo(({ todo, onClose }) => {\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = todo;\n\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(userId)\n      .then(userFromServer => {\n        setUser(userFromServer);\n      });\n  }, []);\n\n  const handleCloseButtonOnClick = () => onClose();\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"close\"\n              data-cy=\"modal-close\"\n              onClick={handleCloseButtonOnClick}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n","import React, { useState, useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { Todo } from './types/Todo';\nimport { TodoStatus } from './types/TodoStatus';\n\nimport { normalize } from './components/helpers';\n\nimport { getTodos } from './api';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [query, setQuery] = useState('');\n  const [status, setStatus] = useState<TodoStatus>(TodoStatus.All);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  useEffect(() => {\n    getTodos()\n      .then(todosFromServer => {\n        setTodos(todosFromServer);\n        setIsLoaded(true);\n      });\n  }, []);\n\n  const selectTodo = (todo: Todo) => {\n    setSelectedTodo(todo);\n  };\n\n  const clearSelectedTodo = () => {\n    setSelectedTodo(null);\n  };\n\n  const filterQuery = (value: string) => {\n    setQuery(value);\n  };\n\n  const selectStatus = (todoStatus: TodoStatus) => {\n    setStatus(todoStatus);\n  };\n\n  const visibleTodos = todos.filter((todo) => {\n    const normalizedQuery = normalize(query);\n    const normalizedTodo = normalize(todo.title);\n\n    const isTodoIncluded = normalizedTodo.includes(normalizedQuery);\n\n    let isStatusMatch: boolean;\n\n    switch (status) {\n      case TodoStatus.Active:\n        isStatusMatch = !todo.completed;\n        break;\n\n      case TodoStatus.Completed:\n        isStatusMatch = todo.completed;\n        break;\n\n      default:\n        isStatusMatch = true;\n    }\n\n    return isTodoIncluded && isStatusMatch;\n  });\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                status={status}\n                onFilter={filterQuery}\n                onSelectStatus={selectStatus}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoaded\n                ? (\n                  <TodoList\n                    todos={visibleTodos}\n                    selectedTodo={selectedTodo}\n                    onSelect={selectTodo}\n                  />\n                )\n                : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          onClose={clearSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}